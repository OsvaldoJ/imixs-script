
Worklists
~~~~~~~~~~~~~~~~~~~~
 
 Worklists are specific sets of workitems to be used to navigate. For example 
 you can display a task-list with all open tasks or a statuslist with all 
 workitems created by the current users. The worklists are accessed through the 
 {{{http://www.imixs.org/xml/restservice.html}Imxis REST API}}.
 
 The method 'loadWorkitems' can be used to load a worklist:
 
+-------------------------------------------------------------+ 
...
<script>
	loadWorkitems('workflow/worklistbyowner/null.json?type=workitem');
...
<script>
....
<body>
   ...
   <div id="worklist_view"/>
   ...
</body>
+-------------------------------------------------------------+ 
 
 The example code above loads the view 'worklistbyowner'. 
 The result of the view is automatically displayed in the div section with 
 the ID 'worklist_view'
 
 The html element with the id 'worklist_view' is the default output area for a worklist.
 You can specify also an alternative section to display multiple worklists in one page:
 
+-------------------------------------------------------------+ 
...
<script>
	loadWorkitems('workflow/worklistbyowner/null.json?type=workitem');
	loadWorkitems('workflow/worklistbycreator/null.json?type=workitem','my_worklist_section');
...
<script>
....
<body>
   ...
   <div id="worklist_view"/>
   <div id="my_worklist_section"/>
+-------------------------------------------------------------+  

 In this example the result of the 'worklistbycreator' will be displayed in the div 'my_worklist_section'.
 
* Customize Worklist Layout 
~~~~~~~~~~~~~~~~~~~~
 The layout of a worklist defaults to a standard layout generated by Imixs Script. You can
 overwrite this layout by implementing a custom method bound to the event 'refreshWorklist':
 
+-------------------------------------------------------------+  
	 $(document).on( "refreshWorklist", function(e, data, service) {
	   // your code goes here
	 });
+-------------------------------------------------------------+  
	 
 In this example a general method is bound to the 'refreshWorklist' event to layout 
 the worklist. The data param contains an array of workitems and the service param indicates
 the worklist type. 
 
 As an alternative you can also bound the 'refreshWorklist' event to a specific part of a 
 page. So the following example is bound only to the worklist section 'my_worklist_section' from the example above.
  
+-------------------------------------------------------------+  
	 $("#my_worklist_section").on( "refreshWorklist", function(e, data, service) {
	   // your code goes here
	 });
+-------------------------------------------------------------+  

 So with this event handling you can implement individual layouts for any kind of worklist.
 
* Caching 
~~~~~~~~~~~~~~~~~~~~
 A worklist is only loaded once via the rest service. After a worklist was received the 
 result is stored in a local cache. This is for performance reason. 
 So if you call the method 'loadWorkitems' twice the rest service will only be called once.
 To clear the cache you can use the clearWorkflowElement() method.

+-------------------------------------------------------------+  
clearWorkflowElement('workflow/worklistbyowner/null.json?type=workitem');
+-------------------------------------------------------------+  
 